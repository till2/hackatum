Optiver - hackatum-team-012
not necessary
Inspiration

My inspiration was mostly given from the presentation that the wonderful people of optiver gave. The actual challenge is pretty straight forward: 'create a market making bot that is profitable, minimizes risk and minimizes the spread of the instruments'.

Implementing this, however is another story.
What it does

I think I've created the simplest possible profitable bot.

What is does:

    Calculate the spread of the C2_GREEN_ENERGY_ETF
    if the spread is above a certain threshold we place a buy and ask bid at the same time
    To avoid risk hedge against the market movements by selling the illiquid stocks C2_WIND_CO and C2_SOLAR_CO
    Profit????

How we built it

Using python and optivers library optibook. We also used AWS Cloud9 as a code editor which I haven't used before.
Challenges we ran into

While the concept of my algorithm is easy I struggled a bit with understand what exactly a market maker is and how they actually make money.
Accomplishments that we're proud of

Becoming profitable
What we learned

Be better at time management.
Built With

    python

---

Optiver - team 008 (Leaderboard winners 2022)
An algorithmic trading bot for Optiver

Inspiration

Interest in finance, money.
What it does

We built an algorithmic trading bot which primarily has two functions, removing market inefficiencies using hedging and market making for illiquid markets to make them more efficient. Our final strategy is solely market making but also checks that we specifically do not create a hedging opportunity for others. Why just market making? Optiver is a market maker so I wanted to impress them to give me a job. jk, hedging alone was causing more problems with managing limits rather than giving profits
How we built it

We used Python and the Optibook API for building the bot. We maintained an internal average holding price book since it was not provided by an API and used it to place trades smartly for the hedging part. For market making, we followed a standard method inspired from a research paper, simplified it for the current use case and tweaked the parameters to obtain an optimal return to risk tradeoff. The core idea is to take our positions into account while proposing a quote and smartly exploiting the current order book for optimal returns.
What makes our approach unique?

Our market making strategy performs fairly well in all markets, be it the highly liquid fossil etf or the green etf. Additionally we consistently have high sharpe ratios than others, which is a true indicator of the long term performance, confirms that our profits are not based on chance. Even though we might not have the highest PnL (we hope we do), we are confident we will have a good sharpe ratio since our philosiphy is to be risk averse. Additionally, we put emphasis on fighting adversaries with lots of sanity checks eventually improving spreads all while preventing risks.
Challenges we ran into

Making money was quite easy initially using the hedging strategy since the order book was iliquid, there were less market players using the same strategy and opportunities were more readily available. Although, it became harder and harder as people started making markets in the same order book, to the point, where we decided to altogether discard that from our final strategy.

There were other issues related to limit checks, which we often ran into, we implemented a self check to prevent any sort of penalty arising from that. Besides that, we used exception handling to restart trading, close positions automatically in case of any disruption.
Accomplishments that we're proud of

We managed to reduce the spread in an illiquid market and made it more efficient. During the process we also managed to make some profit. Particularly we tried to maintain our position as neutral as possible in order to minimise risk.
What we learned

Making money in High Frequency Trading is very challenging, a strategy which works now may not work in the future and you have to constantly analyze, adapt and iterate on your strategies to stay above others. Handling risk and doing sanity checks is very important. I myself blowed up the whole portfolio several times due to not handling carefully crafted orders by adversaries.
What's next for the Optiver Trading Bot

Exploring more complex market making strategies making use of deeper trade histories, possibly using indicators to identify pricing trends to get an asymmetrical spread when required.

P.S. Thanks to my teammates for their moral support xD, we wanted both the iphone and apple watch so they left me alone :( ~ Naman
Built With

    python

---

Optiver-optibook_team_041
Market making and arbitrage in an efficient market!

---

Optiver
A innocent market-maker bot ;)
Inspiration

At the beginning, we decided our goal in this competition is not the winning, but the fun and collaboration between the teams and members. We picked the Optiver's challenge it is a new area for us, and we want to learn something new throughout this HackaTUM. Also, it seems very entertaining when it comes to competing with other teams and improve our algorithms over time.
What it does

Our Algorithms will ALWAYS make REAL CASH profit
How we built it

We decided to come up with the simple solution first, which is always checking the profit before we buy it. We want to constantly buy or sell stock and basket immediately if its price increase after we buy it or decrease after we sell it. We tried to always get our volume as near as zero, so that it will not rely on the price of the stocks/baskets. Then we set up some conditions, if we are too close to the limit borders we stop our normal mode and trade to get our positions volume away from the borders. After that, we added trace mark for each trading, so it avoids buying stocks/baskets that we just sell which would lead to a self trade. Finally, we want to set up some boundaries so that it can increase the profit.
Challenges we ran into

On the first day, we overengineered the challenge and understood it completely wrong so we actually begin much later than other teams. Then we had a problem with overbuying and overselling because we bought too much but not selling or vice versa. Another problem occurred when we were trying to execute a self trade.
Accomplishments that we're proud of

We are very proud that we can come up with the solution and algorithms in shortage, since we have no knowledge at all in finance and we understood the challenge in completely the wrong way at the beginning. The algorithm always returns real cash profit and a high positive PnL. Maybe it does not have the highest PnL and our algorithms are not the most effective solution, but we have come a long way to achieve this.
What we learned

We have learned a lot for the last 48 hours, especially in finance area. We had a lot of fun, made some new connections, learned many things not only through the hacking but also through the booths and the workshop events.
What's next for Optiver

It is a very interesting challenge for all of us. It would be great if we have something similar like this in further evens.
Built With

    optibook
    python

---

Optiver - optibook_schmups _(002)
Market Making trading bot using arbitrage to hedge positions.
Inspiration

We had a lot of fun when we were ranked number 1 in the challenge and testing phase. Our goal is to repeat our success in the official testing period and defend our title.
What it does

Our algorithm is a market-making algorithm that trades the green energy basket and the fossil fuel basket. It continuously quotes 2-sides in the basket's order book, and hedges our trades in the two stocks.
How we built it

Our algorithm is written in Python and is based on the idea of market-making.

We place orders for asks and bids to try and catch the spread, at the same time we are also trading arbitrage. Our arbitrage bot logically hedges all of his trades, but as a market marker trading in a market with low liquidity we had to take up the less loved side of the trade in non-neutral positions. In this scenario, we take advantage of our arbitrage bot, when it finds an opportunity for a trade it will only open one side of the trade in order to help us achieve market neutrality. This is our goal since we believe our edge is in capturing the spread and not in our ability to predict where the market is going.

We believe our algorithm is resilient to different market conditions, and we are confident it will hold up well when markets get very busy.
Challenges we ran into

It was a challenge for us to evaluate the correct degree of risk and the correct parameters for our script. We wanted to maximise our profits but also have a consistent strategy which was relatively risk averse. Our way of doing this was by regularly changing the size of our total positions and how much of that was unhedged, as this is how our bot analyses risk.

We ran into a few challenges when building our algorithm. First, we had to make sure that we properly hedged our trades. We also had to account for the 100 lot limit for the combined "hedged" position.
Accomplishments that we're proud of

We are proud of our algorithm's performance and profitability. We are also proud of our ability to properly hedge our trades and keep our position within the 100 lot limit.
What we learned

We learned a lot about market-making and risk management. We also learned how to build an algorithm that is resilient to different market conditions.
What's next for schmup

We plan on continuing to refine our algorithm and making it even more resilient to different market conditions.
Built With

    python

---

Team Uwe
A conservative, but still highly provitable trading algorithm for the 2022 hackaTUM

Submission file

markt-making.py
What it does

We have 2 different strategies:

    The very low risk trading between the two stocks and the ETF.
    = The system trades stocks and ETFs always in ration 2:1. The result is no problems with hedging.
    = It is possible that Stocks are not available for the expected price anymore. In these cases we use part of our potential profit to close the existing gap with worse trades.
    = In some cases there is still a hedging risk. To avoid these we balance our positions with the best deals possible.
    = Regularly the balance between ETF and stocks is fixed, to prevent hedging.
    = Because of the low risk we try to maximize the trading opportunities with trading on both "markets".

    We liquidize the market by continuously quoting two sides in the order book. This strategy excels when the market is stable.
    Here we have two unique and innovative approaches, which both prevent hedging completely:
    = Once a bid (ask) is fulfilled no further bid will be ordered until the ask (bid) also succeeds
    -> low risk, low reward because of waiting
    = When many bids (asks) are fulfilled, the bid (ask) price is lowered (made higher) until the asks (bids) are fulfilled, then when a bid (ask) is accepted, it is accepted to a very lucrative price
    -> medium risk, high reward

Problems:

= in general it was hard to test because the environment was often completely manipulated by 1 or 2 teams
-> to less popular times, where no trolls were around, the testing worked amazingly

= during the first 24 hours we had massive problems with implementing a basic strategy with profit -> through hard teamwork we collectively started understanding the fundamentals of algorithmic trading
Built With

    python

---

Optiver Hedged Market Making
A trading algorithm for hedged market making.


Our Strategy:

We implemented two different trading agents (python modules).

The first one focuses on arbitrage in the Fossil Energy Markets.

The second one does hedged Market Making in the Green Energy Markets: Per default (no position), it underbids the current best ask and overbids the current best bid of the Green Future ETF. However, if it has a positive or negative position in the Green Energy Markets ETF, it tries to implement the strategy "Lean Your Market", i.e. it tries to move the market in the opposite direction of its position. I.e., when it has a positive position, it improves the bid and worsens the ask. When it has a negative position, it improves the ask and worsens the bid. We choose a hedge ratio between 0 and 1 with which the algorithm hedges its Green Future ETF with the two green energy stocks. A hedge ratio of 1 means a full hedge with the relationship ETF = 0.5 Stock1 + 0.5 Stock2. While a hedge ratio of 0 means no hedging at all. (The sign of the hedge positions are the opposite of the sign of the ETF position).
Built With

    amazon-web-services
    python

---

Optiver - 3σmales
Joining the optiver challenge to build an algorithmic market maker bot.

Inspiration

Money basically.
What it does

Make the market (reducing the bid-ask spread) while making us money
How we built it

python and using their interface and library
Strategy

    math(best bid of stocks in avg) > best offer of etf ← buy etfs, sell stocks
        demand is higher than supply ⇒ buy first, then sell
        supply is higher than demand ⇒ sell first, buy later
    math(best offer of stocks in avg) < best bid of etf ← buy stocks, sell etfs
        demand is higher than supply ⇒ buy first, then sell
        supply is higher than demand ⇒ sell first, buy later

Problems:
Problem 1

imagine scenario math(best bid of stocks) > best offer of etf so we want to buy etfs (for the lower price) and sell stocks (for a higher price).

    say there is a high supply for etfs (say 50) and a low demand for stocks (say 2). this means amount(stocks) << amount(etfs). Here it is a relatively safe trade to short sell stocks first, and then buy etfs, since we are pretty sure there will be etfs available
    Now say there is a higher demand for stocks (say 50) than a supply for etfs (say 2). this means amount(etfs) << amount(stocks). Here it is a relatively safe trade to first buy etfs and then sell stocks, since we are pretty sure someone will still buy our stocks.
    Now we come to the “risky” parts. what if the demand of stocks == supply for etfs. Here either trade we execute first, we are at high risk and very unsure if we can still sell/buy accordingly. thus we need a delta, a range, how far away we want to stay from this case! (Fist risk hyperparameter that can be learned)

Problem 2

what if we buy but can't sell for our calculated/estimated price (sell for profit) and thus take a potential loss and vice versa. Solution: include a loss tolerance (first implementation taking infinite losses), after which we discontinue hedging (then we would need to compensate and recover hedge ratio via strategy change) (Second risk parameter)
Challenges we ran into
Accomplishments that we're proud of
What we learned
What's next for Three Sigmas
Built With

    python

---

I triple W
Algorithmic super trader
Project Submission - Optiver Challenge - Team 032 (I Triple W)
Idea Description and Implementation Explanation
Part 1

    Check if there is a market inefficiency, i.e. a difference between theoretical basket price and real basket price, in a loop
    Separate inefficiency situation into two cases:
        Highest bid price for the basket is larger than the combined partial stock prices. → Basket is overvalued and we want to sell the basket and buy the stocks
        Lowest ask price for the basket is smaller than the combined partial stock prices. → Basket is undervalued and we want to buy the basket and sell the stocks.
    Determine optimal order volume for each instrument by considering a balancing of our position and a maximisation of the order volume
        Start with maximum potential order volumes from the order book
        At first, reduce the order volumes of both stock instruments to be as balanced as possible
        Afterwards, adjust the order volumes of basket and both instrument to keep the basket positions as equal as possible to the stock positions
    Place IOC orders if the profit is larger than a threshold

Part 2

    We quote between the lowest ask and the highest bid to provide liquidity to an illiquid market: we make sure to always overbid and underask the current order book
        Long term quoting plan: quoting depends on: “hit” and “lift” rate, market liquidity, risk we are willing to take, our current inventory
    Our orders are reset on every tick in order to account for market movements such that our bids and asks always adapt to the current order book
    For our prototype we measured market metrics (by analysing the order book) and found that an order volume of 4 on both sides respectively is small enough to limit risk exposure and high enough to make a significant profit
        Long term volume plan: we propose a dynamic approach: the order volume should depend on the inventory (positive position: higher ask volume, negative position: higher bid volume) and our current/forecasted “hit” and “lift” rate
    Hedging: We combined our market making strategy with the opportunity detection strategy from part 1 which handles the balancing
        Long term hedging plan: having an optimizer function that outputs “Hedge” or “Wait” depending on parameters: our position size, PnL of the hedge (best current market price that we can go short/ long on the stocks for minus our market making bid-ask spread, i.e. the price that we might pay for the hedge minus the profit that we make with market making)

Additional implementation details:

    Start multiple threads, one for the green energy market making algorithm (part 2) and one for the hedging of each market segment (part 1), i.e. three threads in total

Risk Handling

    We chose a minimal risk strategy by keeping our positions as balanced as possible
    Risks for hedging:
        We do not fully realise our orders and therefore get an unbalanced portfolio.
        Being unbalanced is risky because we are dependent on the random movement of the market
        We adjust our orders to our imbalances, such that we tend towards a balanced portfolio
    Risks for market making:
        Depend heavily on part 1 (since we combined the two strategies)
        Additional risk sources: We are not able to hedge the size of our market making exposure/volume profitably

Built With

    algorithms
    amazon-web-services
    cloud9
    python
    trading

---

AT-AT: Algorithmic Trading at TUM
A simple algorithm that exchanges ETFs for the corresponding stocks and back in order to capture profits with comparatively low risk.

What it does

Our project follows a simple approach for making relatively low risk trades. It generally follows the principle given in the challenge description. The algorithm identifies opportunities to sell ETFs or the corresponding stocks and use the money to buy the other. We try to keep the hedgded position to a minimum.
How we built it

We take the best bids and asks of each triplet and calculate whether buying or selling in a 2:1 ratio allows us to generate profit. If that is the case we calculate the maximum volume for that the transaction can be carried out and they are sent to the exchange.
Challenges we ran into

One of the biggest challanges was keeping hedging at bay. For this we used linear algebra, the squared error and minimization to calculate the most efficient way to add or subtract the volume bought or sold of individual stocks or ETFs so that the ratio decreases.

At the same time we had a hard time generating consistent profit. This was solved by first executing the selling action and then buying the corresponding amount. It especially helped to set the price one is willing to pay for a stock to the value one used for selling. This allows the exchange of the most amount between stocks and ETF. It minimizes hedging and with that protects the investment from being affected by fluctuations of the market.
What we learned

Risk Management and that one can work through a night with enough energy drinks and pressure.
What's next for AT-AT: Algorithmic Trading at TUM

Selling iPhones?
Built With

    python

---

Optiver - hackatum-team-038
Creating a trading bot that tries to make as much money as possible

MarketMakerBot
Challenge

Create a bot that tries to stablise a fictionary market, with four stock assets and two ETF's, out of which two are sustainable and two aren't. Another challenge is to move the market from the liquid fossil-fuel based market to the sustainable market. (Read more at the first link)
Our Strategy

Because we were a team of introverted informatics students and don't like to take risks, we developed our trading bot to only trade when he sees that a profit can be made. The bot calculates the theoretical value of the ETFs based on its current stock prices and calculates whether the ETF's value is above or below it's actual value. Based on that, the bot rotates it's position and either sells the ETF and buys the stocks instead or the other way around. This is done in the right ratio and only as much volume is traded as the current asks / bids are offering.

By doing this over and over again, the bot makes a lot of transactions with small margins of money resulting in a considerable profit after a while.

Furthermore, the bot constantly looks for opportunities to sell its stocks, if it can sell them for more money than it invested when buying them (and the other way around for its short stocks).
Our Issues that we ran into

We ran into the given limits pretty quickly and were wondering why our bot keeps crashing and disconnecting, but once we found the limits at the bottom of the challenge page, nobody could stop us. Actually, we stopped ourselves, because we were so tired that we implemented our logic wrong (only for a short time) and made an infinite money glitch for other teams to exploit. Once we were stuck with ~(-500) ETF Stocks. nobody wanted to sell ETFs, only buy them. Our bot still wanted to do trades, but we unfortunately had to stop it every time. Fortunately there were plenty of resets, out of which we only used the last two to really test our code. By that time most of the teams had already finished or weren't trading anymore, so the marked wasn't saturated enough to be able to test successfully. We had some logistical issues as well, because each of our team members took at least an hour to arrive at university and unfortunately we haven't thought at the beginning to partake in the race to reserve a room.
How would our bot work on a very busy market?

As previously stated, our bot did not have enough buy options for ETFs, that's why it failed. With a more active market where more people (and bots too) were involved, there would soon be one clear winner (our bot, obviously). We wouldn't have only stabilized the market liquidity, but also made one hell of a PnL.
Summary

We did enjoy working on this challenge, especailly given all the tools provided by the challenger - Optiver - such as the free EC2 instance where we could test our python scripts and convert to a Jupyter notebook. The interesting and amusing part was also the dashboard (first link below), where we could instantly see any advancements or mistakes that our bot and other teams' bots made.

Thank you very much for reading these long paragraphs, if you have gotten this far, whenever you see us at Uni just come to us and say "Hey Mate!" and it will be our honor to personally present to you a gift. (The gift will be a strong handshake)
Built With

    python

---


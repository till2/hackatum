Video/ Presentation
- We need a good design (image with project title and background/ meme/ etc.) for our project page on devpost
- Bring a microphone (and maybe even greenscreen) to record the video
- Have a stable camera, no shaky phone video
- Maybe also present slides in video
- Make a short, interesting video, not long explanations (no one cares to watch it all...)
- Add some small code snippets iin the devpost and make it look clean / also good reading flow (see good github README.md's)

Code
- speed is important (use fast XGBoost or similar, not a big LLM)
- one bad trade can mess everything up (https://devpost.com/software/optiver-challenge-2vuj9a) so just make small trades ideally => put safeguards in

Insights from the 2023 challenge:
- exploit market gaps
- exploit dual listings (different spread) => this is called arbitrage
- not sure if this is a good strategy: be risk averse during high volatility
- This boosting lib is apparently also fast: https://catboost.ai/en/docs/concepts/python-installation (todo: benchmark inference for this)
- Dual listing + regularly selling all assets was their most profitable strategy: https://devpost.com/software/team-058 (winner)
- Exploit other algorithms by market manipulation :D (try to go out of fitted zone for their models) (winner)
- What are dynamic lot sizes and prices? https://en.wikipedia.org/wiki/Dynamic_lot-size_model
- They say a data scraper (scrape market news and current trades) was really helpful for visualization and to have more training data: https://devpost.com/software/sensitrade
- They found out (through visualization) that the impact of news on the market was implemented as a gaussian mixture model: https://devpost.com/software/sensitrade
- Dual Listing: Treat individual markets as a single market (combine orderbooks and find highest bidding price and lowest asking price in the unified market)
- Hedging
- A simple approach often beats a complex one (https://devpost.com/software/optiker-challenge)
- Visualization at the beginning is important before writing any code (https://devpost.com/software/optiker-challenge)
- Risk management + the actions being at the edge of your risk constraints is key (https://devpost.com/software/optiker-challenge)
- Market participants are chaotic and news can be ambiguous
- Put in limit orders => see failure their video: https://devpost.com/software/optiver-isn4gu
- Distilled ROBERTA is 10x faster than the one that was given (https://devpost.com/software/ligma-trader)
- Parallelization of the sentiment analysis was a good addition
- Use the default strategy and just tell it when it shouldn't buy (https://devpost.com/software/optiverchallenge-6rfduy)

Insights from the 2022 challenge:
- soely market making + not creating a hedging opportunity for others works well: https://devpost.com/software/optiver-algorithmic-trading-bot
- Increase in PnL could come from your code being better or other teams doing weird things (it's interactive!)
- There were plenty of resets when you can test your code
- When no one wants to trade anymore, you can not make that much profit/ might be stuck with a full inventory of stocks/ ETFs

Random Ideas:
- We could use a factor graph to represent the market and competitors and then use belief propagation to infer the optimal trading strategy
- We could use a LSTM to predict the market
- We could use a GAN to generate synthetic data
- We could use a transformer model to predict the market
- We could use a RL to learn the optimal trading strategy
- We could try to predict which common strategies the others are using and change our model based on that
